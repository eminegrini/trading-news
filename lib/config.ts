
import { supaAnon, supaService } from './supabase'
export type StrategyConfig = { fast:number; slow:number; rsiPeriod:number; rsiMin:number; riskPerTradeUSD:number; takeProfitPct:number; stopLossPct:number; paused:boolean; reportEmail?: string | null }
export async function loadConfig(): Promise<StrategyConfig>{ if(!supaAnon) return envConfig(); const { data, error } = await supaAnon.from('bot_config').select('*').eq('id',1).maybeSingle(); if(error || !data) return envConfig(); return { fast:Number(data.fast_ema), slow:Number(data.slow_ema), rsiPeriod:Number(data.rsi_period), rsiMin:Number(data.rsi_min), riskPerTradeUSD:Number(data.risk_usd), takeProfitPct:Number(data.tp_pct), stopLossPct:Number(data.sl_pct), paused:!!data.paused, reportEmail: data.report_email ?? null } }
export function envConfig(): StrategyConfig{ return { fast:Number(process.env.FAST_EMA||12), slow:Number(process.env.SLOW_EMA||26), rsiPeriod:Number(process.env.RSI||14), rsiMin:Number(process.env.RSI_MIN||52), riskPerTradeUSD:Number(process.env.RISK_USD||10), takeProfitPct:Number(process.env.TP_PCT||0.03), stopLossPct:Number(process.env.SL_PCT||0.02), paused:false, reportEmail: process.env.REPORT_EMAIL_TO || null } }
export async function saveConfig(cfg: StrategyConfig){ const { error } = await supaService.from('bot_config').update({ fast_ema:cfg.fast, slow_ema:cfg.slow, rsi_period:cfg.rsiPeriod, rsi_min:cfg.rsiMin, risk_usd:cfg.riskPerTradeUSD, tp_pct:cfg.takeProfitPct, sl_pct:cfg.stopLossPct, paused:cfg.paused, report_email: cfg.reportEmail ?? null, updated_at:new Date().toISOString() }).eq('id',1); if(error) throw error }
