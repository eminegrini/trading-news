
import { supaService, supaAnon } from './supabase'
export type Position = { side: 'LONG', entryPrice: number, qty: number }
export type BotState = { symbol: string; timeframe: string; position: Position | null; equity: number; lastClose?: number }
export type Trade = { id:string; time:string; side:'BUY'|'SELL'; price:number; qty:number; pnl?:number; reason:string; live?:boolean; orderId?:string }
export async function loadState():Promise<BotState>{ const { data, error } = await supaService.from('bot_state').select('*').eq('id',1).single(); if(error) throw error; const pos=(data.position_side && data.position_entry && data.position_qty)?{ side:'LONG' as const, entryPrice:Number(data.position_entry), qty:Number(data.position_qty) }:null; return { symbol:data.symbol, timeframe:data.timeframe, position:pos, equity:Number(data.equity), lastClose: data.last_close!==null?Number(data.last_close):undefined } }
export async function saveState(state:BotState){ const { position }=state; const { error } = await supaService.from('bot_state').update({ symbol:state.symbol, timeframe:state.timeframe, equity:state.equity, position_side: position?position.side:null, position_entry: position?position.entryPrice:null, position_qty: position?position.qty:null, last_close: state.lastClose??null, updated_at: new Date().toISOString() }).eq('id',1); if(error) throw error }
export async function loadTrades(){ const client = supaAnon ?? supaService; const { data, error } = await client.from('trades').select('*').order('time',{ascending:true}); if(error) throw error; return (data||[]).map((t:any)=>({ id:t.id, time:t.time, side:t.side, price:Number(t.price), qty:Number(t.qty), pnl:t.pnl!==null?Number(t.pnl):undefined, reason:t.reason||'', live:!!t.live, orderId:t.order_id||undefined })) }
export async function appendTrade(t:Trade){ const { error } = await supaService.from('trades').insert({ id:t.id, time:t.time, side:t.side, price:t.price, qty:t.qty, pnl:t.pnl??null, reason:t.reason, live:t.live??false, order_id:t.orderId??null }); if(error) throw error }
export async function appendEquity(equity:number, price?:number){ const { error } = await supaService.from('equity').insert({ equity, price: price ?? null }); if(error) throw error }
export async function loadEquityHistory(limit=1000){ const client=supaAnon ?? supaService; const { data, error } = await client.from('equity').select('*').order('time',{ascending:true}).limit(limit); if(error) throw error; return (data||[]).map((e:any)=>({ time:e.time, equity:Number(e.equity), price:e.price!==null?Number(e.price):undefined })) }
